CLEARSCREEN.
RUNPATH("circlenav.ks").
RCS ON.
SAS OFF.
WAIT 5.

//SET STEERINGMANAGER:MAXSTOPPINGTIME TO 5.
//SET STEERINGMANAGER:PITCHPID:KD TO 1.
//SET STEERINGMANAGER:YAWPID:KD TO 1.
//SET ASDS TO LATLNG(-0.2056932, -74.473096).
set asds to latlng(-0.158203459, -69.9923700).

LOCK STEERING TO HEADING(270, 10).
WAIT UNTIL VANG(SHIP:FACING:VECTOR, HEADING(270, 10):VECTOR) < 0.5.
LOCK THROTTLE TO 0.7.
WAIT UNTIL ADDONS:TR:IMPACTPOS:LNG < ASDS:LNG + 0.1. //0.02
LOCK THROTTLE TO 0.0.
WAIT UNTIL SHIP:VERTICALSPEED < -1.
WAIT 5.
LOCK STEERING TO SRFRETROGRADE.
WAIT UNTIL SHIP:ALTITUDE < 35000.
BRAKES ON.

AG1 ON.
IF ADDONS:TR:IMPACTPOS:LAT < ASDS:LAT {
	LOCK STEERING TO HEADING(0, 70).
	WAIT UNTIL VANG(HEADING(0, 70):VECTOR, SHIP:FACING:VECTOR) < 2.
	LOCK THROTTLE TO 0.7.
	WAIT UNTIL ADDONS:TR:IMPACTPOS:LAT > ASDS:LAT.
	LOCK THROTTLE TO 0.0.
} ELSE IF ADDONS:TR:IMPACTPOS:LAT > ASDS:LAT {
	LOCK STEERING TO HEADING(180, 70).
	WAIT UNTIL VANG(HEADING(180, 70):VECTOR, SHIP:FACING:VECTOR) < 2.
	LOCK THROTTLE TO 0.7.
	WAIT UNTIL ABS(ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT) < 0.001.
	LOCK THROTTLE TO 0.0.
}
IF ADDONS:TR:IMPACTPOS:LNG < ASDS:LNG {
	LOCK STEERING TO HEADING(90, 70).
	WAIT UNTIL VANG(HEADING(90, 70):VECTOR, SHIP:FACING:VECTOR) < 2.
	LOCK THROTTLE TO 0.7.
	WAIT UNTIL ADDONS:TR:IMPACTPOS:LNG < ASDS:LNG - 0.005.
	LOCK THROTTLE TO 0.0.
} ELSE IF ADDONS:TR:IMPACTPOS:LNG > ASDS:LNG {
	LOCK STEERING TO HEADING(270, 70).
	WAIT UNTIL VANG(HEADING(270, 70):VECTOR, SHIP:FACING:VECTOR) < 2.
	LOCK THROTTLE TO 0.7.
	WAIT UNTIL ADDONS:TR:IMPACTPOS:LNG < ASDS:LNG + 0.5.
	LOCK THROTTLE TO 0.0.
}

UNTIL SHIP:ALTITUDE < 8000 {
	LOCK ANGLE TO circle_distance(ADDONS:TR:IMPACTPOS, ASDS, SHIP:BODY:RADIUS) / 5.
	
	IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG < -0.001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT < -0.001 {
		LOCK STEERING TO HEADING(225, MAX(90 - ANGLE, 75)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG < -0.001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT > 0.001 {
		LOCK STEERING TO HEADING(315, MAX(90 - ANGLE, 75)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG > 0.001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT < -0.001 {
		LOCK STEERING TO HEADING(135, MAX(90 - vang(up:vector, srfRetrograde:vector) - ANGLE, 75)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG > 0.001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT > 0.001 {
		LOCK STEERING TO HEADING(45, MAX(90 - vang(up:vector, srfRetrograde:vector) - ANGLE, 75)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG < -0.001 {
		LOCK STEERING TO HEADING(270, MAX(90 - ANGLE, 75)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG > 0.001 {
		LOCK STEERING TO HEADING(90, MAX(90 - vang(up:vector, srfRetrograde:vector) - ANGLE, 75)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT < -0.001 {
		LOCK STEERING TO HEADING(180, MAX(90 - ANGLE, 75)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT > 0.001 {
		LOCK STEERING TO HEADING(0, MAX(90 - ANGLE, 75)).
	} ELSE {
		LOCK STEERING TO SRFRETROGRADE.
	}
}

LOCK TRUERADAR TO ALT:RADAR - 18.37.
SET G TO CONSTANT:G * BODY:MASS / BODY:RADIUS ^ 2.
LOCK MAXDECEL TO SHIP:AVAILABLETHRUST / SHIP:MASS - G.
LOCK STOPDIST TO SHIP:VERTICALSPEED ^ 2 / (2 * MAXDECEL).
LOCK IDEALTHROTTLE TO STOPDIST / TRUERADAR.
LOCK IMPACTTIME TO TRUERADAR / ABS(SHIP:VERTICALSPEED).

//LOCK STEERING TO SRFRETROGRADE.
WHEN IMPACTTIME < 5 THEN {GEAR ON.}

WHEN TRUERADAR < STOPDIST THEN {
LOCK THROTTLE TO IDEALTHROTTLE.
}

UNTIL SHIP:ALTITUDE < 1200 {
	LOCK ANGLE TO circle_distance(ADDONS:TR:IMPACTPOS, ASDS, SHIP:BODY:RADIUS) / 3.
	
	IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG < -0.0001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT < -0.0001 {
		LOCK STEERING TO HEADING(225, MAX(90 - ANGLE, 70)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG < -0.0001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT > 0.0001 {
		LOCK STEERING TO HEADING(315, MAX(90 - ANGLE, 70)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG > 0.0001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT < -0.0001 {
		LOCK STEERING TO HEADING(135, MAX(90 - vang(up:vector, srfRetrograde:vector) - ANGLE, 70)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG > 0.0001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT > 0.0001 {
		LOCK STEERING TO HEADING(45, MAX(90 - vang(up:vector, srfRetrograde:vector) - ANGLE, 70)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG < -0.0001 {
		LOCK STEERING TO HEADING(270, MAX(90 - ANGLE, 70)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG > 0.0001 {
		LOCK STEERING TO HEADING(90, MAX(90 - vang(up:vector, srfRetrograde:vector) - ANGLE, 70)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT < -0.0001 {
		LOCK STEERING TO HEADING(180, MAX(90 - ANGLE, 70)).
	} ELSE IF ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT > 0.0001 {
		LOCK STEERING TO HEADING(0, MAX(90 - ANGLE, 70)).
	} ELSE {
		LOCK STEERING TO SRFRETROGRADE.
	}
}
LOCK STEERING TO UP.
//WAIT UNTIL SHIP:ALTITUDE < 1200.
UNTIL trueRadar < 80 { // Boucle pour ajuster la trajectoire afin d'etre le plus precis possible
		LOCK ANGLE TO circle_distance(ADDONS:TR:IMPACTPOS, ASDS, SHIP:BODY:RADIUS) / 2.
		
		IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG > 0.00001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT > 0.00001 {
			LOCK STEERING TO HEADING(225, MAX(90 - ANGLE, 80)).
		} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG > 0.00001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT < -0.00001 {
			LOCK STEERING TO HEADING(315, MAX(90 - ANGLE, 80)).
		} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG < -0.00001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT > 0.00001 {
			LOCK STEERING TO HEADING(135, MAX(90 - vang(up:vector, srfRetrograde:vector) - ANGLE, 80)).
		} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG < -0.00001 AND ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT < -0.00001 {
			LOCK STEERING TO HEADING(45, MAX(90 - vang(up:vector, srfRetrograde:vector) - ANGLE, 80)).
		} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG > 0.00001 {
			LOCK STEERING TO HEADING(270, MAX(90 - ANGLE, 80)).
		} ELSE IF ADDONS:TR:IMPACTPOS:LNG - ASDS:LNG < -0.00001 {
			LOCK STEERING TO HEADING(90, MAX(90 - vang(up:vector, srfRetrograde:vector) - ANGLE, 80)).
		} ELSE IF ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT > 0.00001 {
			LOCK STEERING TO HEADING(180, MAX(90 - ANGLE, 80)).
		} ELSE IF ADDONS:TR:IMPACTPOS:LAT - ASDS:LAT < -0.00001 {
			LOCK STEERING TO HEADING(0, MAX(90 - ANGLE, 80)).
		} ELSE {
			LOCK STEERING TO SRFRETROGRADE.
		}
	}
	LOCK STEERING TO SRFRETROGRADE. // On corrige la vitesse horizontale
	WAIT 1.
	LOCK STEERING TO UP. // on s'oriente vers le haut
WAIT UNTIL ship:verticalspeed > -0.01. // et on attends qu'on atterisse
SET SHIP:CONTROL:PILOTMAINTHROTTLE TO 0.
